openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8090
  description: Generated server url
tags:
- name: User Controller
  description: API for managing users
- name: Card controller
  description: Operation related to Cards
paths:
  /api/v1/users/{id}:
    get:
      tags:
      - User Controller
      summary: "Getting user by id,only ADMIN can view user details"
      operationId: findById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserReadDto"
    put:
      tags:
      - User Controller
      summary: Updating user information
      operationId: updateUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateEditDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserReadDto"
    delete:
      tags:
      - User Controller
      summary: Deleting user by id
      operationId: delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/v1/cards/{id}:
    get:
      tags:
      - Card controller
      summary: Only card owner can see his own card information
      operationId: findById_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardReadDto"
    put:
      tags:
      - Card controller
      summary: Updating card information
      operationId: update
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardCreateEditDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardReadDto"
    delete:
      tags:
      - Card controller
      summary: Deleting card from database
      operationId: delete_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/v1/users:
    get:
      tags:
      - User Controller
      summary: "Getting all users, only User with role ADMIN can see all users"
      operationId: findAllUsers
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserReadDto"
    post:
      tags:
      - User Controller
      summary: 'Creating user '
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateEditDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserReadDto"
  /api/v1/users/auth:
    post:
      tags:
      - User Controller
      summary: Authenticating new user and getting Jwt token to make request
      operationId: authenticateAndGetToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequestDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/v1/cards:
    get:
      tags:
      - Card controller
      summary: Getting all cards with help of special created object PageResponse
        that contains meta data about page
      operationId: findAll
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageResponseCardReadDto"
    post:
      tags:
      - Card controller
      summary: "Creating new card, only ADMIN can do this"
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardCreateEditDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardReadDto"
  /api/v1/cards/transfer:
    post:
      tags:
      - Card controller
      summary: User can transfer funds between his cards or transfer to another person
        card
      operationId: transfer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferRequestDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/v1/cards/request/block:
    post:
      tags:
      - Card controller
      summary: "As user has no authority blocking card, user can request ADMIN to\
        \ block the card"
      operationId: requestCardBlocking
      parameters:
      - name: cardId
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: username
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/v1/cards/block/{id}:
    post:
      tags:
      - Card controller
      summary: "Blocking or cancelling card , only ADMIN can block card"
      operationId: blockCard
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardReadDto"
  /api/v1/cards/active/{id}:
    post:
      tags:
      - Card controller
      summary: "Activating card , only ADMIN can activate cards "
      operationId: activateCardCard
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardReadDto"
  /api/v1/cards/filter:
    get:
      tags:
      - Card controller
      summary: "Getting all cards by filtering card number, card status etc. "
      operationId: findAllByFilter
      parameters:
      - name: cardNumber
        in: query
        required: false
        schema:
          type: string
      - name: expiryDate
        in: query
        required: false
        schema:
          type: string
          format: date-time
      - name: cardStatus
        in: query
        required: false
        schema:
          type: string
          enum:
          - ACTIVE
          - BLOCKED
          - EXPIRED
      - name: balance
        in: query
        required: false
        schema:
          type: number
      - name: userId
        in: query
        required: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CardReadDto"
  /api/v1/cards/allCards:
    get:
      tags:
      - Card controller
      summary: Getting all cards as list
      operationId: findAll_1
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CardReadDto"
components:
  schemas:
    UserCreateEditDto:
      required:
      - firstname
      - lastname
      - passportNo
      - password
      - role
      - username
      type: object
      properties:
        username:
          maxLength: 100
          minLength: 0
          type: string
        password:
          type: string
        firstname:
          maxLength: 50
          minLength: 0
          type: string
        lastname:
          maxLength: 50
          minLength: 0
          type: string
        passportNo:
          maxLength: 60
          minLength: 0
          type: string
        birthDate:
          type: string
          format: date
        role:
          type: string
          enum:
          - USER
          - ADMIN
    UserReadDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        username:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        passport_no:
          type: string
        birthDate:
          type: string
          format: date
        role:
          type: string
          enum:
          - USER
          - ADMIN
    CardCreateEditDto:
      required:
      - cardNumber
      - cardStatus
      type: object
      properties:
        cardNumber:
          type: string
        expiryDate:
          type: string
          format: date-time
        cardStatus:
          type: string
          enum:
          - ACTIVE
          - BLOCKED
          - EXPIRED
        balance:
          type: number
        userId:
          type: integer
          format: int32
    CardReadDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        cardNumber:
          type: string
        expiryDate:
          type: string
          format: date-time
        cardStatus:
          type: string
          enum:
          - ACTIVE
          - BLOCKED
          - EXPIRED
        balance:
          type: number
        user:
          $ref: "#/components/schemas/UserReadDto"
    AuthRequestDto:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    TransferRequestDto:
      type: object
      properties:
        fromCardNumber:
          type: string
        toCardNumber:
          type: string
        amount:
          type: number
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    Metadata:
      type: object
      properties:
        page:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
    PageResponseCardReadDto:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/CardReadDto"
        metadata:
          $ref: "#/components/schemas/Metadata"
